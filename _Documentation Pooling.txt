        - - - POOLING SYSTEM - - -

    :: GENERAL INFORMATION

Documentation for the pooling system, this includes as of May 2019:

* Pooling.cs
	^ PoolBase, Pool<T>, PoolMember, ScenePools, Category(enum)
* IPoolable.cs (Interface)
* ParticleSystemPooling.cs

Version: [may2019] v3.3.3
See the Changelog on the full documentation.

Author: Andres Maldonado - github.com/eudendeew 
Original Author: Martin "quill18" - github.com/quill18
Based on this code https://gist.github.com/quill18/5a7cfffae68892621267
Give credit to me as well as the original author if you feel so. :)


    :: FULL DOCUMENTATION

Complete documentation of the lastest version available at:

https://gist.github.com/eudendeew/e39c7ea13d920f7da09eb2cb592fe1b1


    :: BASIC USAGE

Instead of: Instantiate(yourPrefab, position, rotation);
Use: Pooling.GetFromPool(yourPrefab, position, rotation);

Instead of: Destroy(yourGameObject);
Use: Pooling.SendToPool(yourGameObject);

* Trying SendToPool() on not pooled objects will call Destroy instead, a message
    on the console should confirm this.
* The pool will resize if a new instance is needed. To reduce the impact
    use Pooling.Preload() on Start.
* Destroying an object with delay is not yet supported. e.g. Destroy(yourGO, 3f);


    :: ADVANCED USAGE

    - CALLING FUNCTIONS ON POOL SPAWN / UNSPAWN -
This could be used for resetting an enemy health, or leaving something behind
when an enemy disappears.
In your script use the interface IPoolable, implement it like this:

public class Enemy : MonoBehavior, IPoolable {

    <...your code...> 

    public void OnPoolSpawn() {
        // - Code to be run after this object is spawned and enabled.
    }

    public void OnPoolUnSpawn() {
        // - Code to be run before this object is unspawned and disabled.
    }
}

* Scripts that use IPoolable should be on the root of the prefab,
not on any child object.

 
    - PRELOAD OBJECTS -
Could be used in the beginning of the game to reduce the cost of creating
a new instance of your prefab. Use:

Pooling.Preload(prefabReference, 8);

* Cannot use Pooling Categories.
* Pools are always dynamic, they will resize if a new instance is needed.


    - POOL CATEGORIES -
Objects that are used between levels can be organized inside categories, all
marked as DontDestroyOnLoad. To do so use:

Pooling.GetFromPool(prefab, pos, rot, Pooling.Category.Projectiles);

* Current existing categories are: Projectiles, Enemies, VisualEffects.
* Again, objects spawned with this method are marked as DontDestroyOnLoad.


    :: SUPER ADVANCED USAGE

    - MANUALLY MANAGED POOLS -
Another way to create Pools is with Pooling.Pool:
One big advantage is that unreferenced pools will be collected by the GC.
Intead of accumulating in the main dictionnary inside Pooling.

public class ExampleClass : MonoBehaviour {

    public GameObject prefab;
    public MyScript monoScript;

    private Pooling.Pool myOwnPool;
    private Pooling.Pool<MyScript> genericPool;


    void Start() {

        // - Basic Pool
        myOwnPool = new Pooling.Pool(prefab)

        // OR - Preloaded Pool
        myOwnPool = new Pooling.Pool(prefab, 10, true)

        // Generic Version
        genericPool = new Pooling.Pool<MyScript>(monoScript);
    }
    
    public void SpawnVFX(Vector3 position, Quaternion rotation) {
        myOwnPool.PopFromPool(position, rotation, true);
    }
}


    - Pool Member methods -
// Use this if you add on runtime, a component that uses IPoolable.
// The list of receivers needs to be manually updated.
Pooling.PoolMember pm = GetComponent<Pooling.PoolMember>();
pm.SearchInterfaces(); // It updates interfaces to be called.

// This forces all the calls of IPoolable.OnPoolSpawn and IPoolable.OnPoolUnSpawn
pm.OnDeployFromPool();
pm.OnRecycleToPool();


    :: POSSIBLE ISSUES
https://gist.github.com/eudendeew/e39c7ea13d920f7da09eb2cb592fe1b1#possible-issues
  
    :: CHANGELOG 

[May2019] v3.3.3
+ Options to turn off logs.

[May2019] v3.3.2	
+ Fix double call to OnPoolUnSpawn

[May2019] v3.3.1
+ Particle Pooling Sytem Manually Stop option, and tooltips

[May2019] v3.3.0
+ Pooling.Pool class has been deleted, use Pooling.Pool<Transform>
+ Text fixes
    

Full Changelog at:    
https://gist.github.com/eudendeew/e39c7ea13d920f7da09eb2cb592fe1b1#changelog